# -*- coding: utf-8 -*-
"""sklearn

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wWaLpYJHni5dxOy5dh3c-tLHGzHTqJt9
"""

import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Import necessary libraries

# Generate some sample data
X = np.random.rand(100, 1) * 10  # 100 samples, 1 feature
y = 2.5 * X + np.random.randn(100, 1) * 2  # Linear relation with some noise

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features (mean=0, variance=1)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Create a linear regression model
model = LinearRegression()

# Train the model
model.fit(X_train_scaled, y_train)

# Make predictions
y_pred = model.predict(X_test_scaled)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print the evaluation metrics
print(f"Mean Squared Error: {mse}")
print(f"R^2 Score: {r2}")

# Plot the results (optional)
import matplotlib.pyplot as plt

plt.scatter(X_test, y_test, color='black', label='Actual data')
plt.plot(X_test, y_pred, color='blue', linewidth=3, label='Predicted line')
plt.xlabel('X')
plt.ylabel('y')
plt.title('Linear Regression with sklearn')
plt.legend()
plt.show()

